https://app.pluralsight.com/library/courses/angular-fundamentals/table-of-contents
https://github.com/jmcooper/angular-fundamentals-files
https://github.com/Annie-Huang/ng-fundamentals

https://jcoop.io/angular-practice-exercises/

2. Getting Started with Angular
#####################################
ng new ng-fundamentals
cd ng-fundamentals/
git remote add origin git@github.com:Annie-Huang/ng-fundamentals.git
git push -u origin master

D:\react\ng-fundamentals>npm install ngf-bootstrap --save


3. Creating and Communicating Between Angular Components
#######################################################################
In events-list.component.ts
      <event-thumbnail #thumbnail [event]="event1"></event-thumbnail>
      <button class="btn btn-primary" (click)="thumbnail.logFoo()">Log me some foo</button>

In event-thumbnail.component.ts
  logFoo() {
    console.log('foo');
  }

When you click 'Log me some foo', it will print 'foo'

-----

In events-list.component.ts
      <event-thumbnail #thumbnail [event]="event1"></event-thumbnail>
      <h3>{{thumbnail.someProperty}}</h3>

In event-thumbnail.component.ts
  someProperty: any = 'some value';

The page will display 'some value'

---------

There is a way to get around the CSS encapsulation if you want to apply styles to a child component. All you have to do is apply the deep selector. 
That's fairly well documented, so if you find you have a need for it, go check that out.


4. Exploring the Angular Template Syntax
#####################################################
{{ user.name }}
{{ 2 + 2 }}
{{ getIt() }}

*ngFor="let event of events"
The first thing that stands out is this asterisk. That indicates that this ngFor directive is a structural directive. 
Structural directives are different from other directives because structural directives actually change the shape of the DOM. 

safe navigation operator: {{event?.location?.city}}

*ngIf:
This can be a great performance saver if you know that you're not going to need this element again for a while, 
especially if this element is something that's costly to render or to generate. 

what if we were going to show and hide this section frequently, say based on a button click or a mouse hover that toggles its visibility? 
If we completely removed this and added a back each time, Angular would have to do all that work to render it every time we show it. 
In that case, completely removing it from the DOM can be expensive. It would be better if we could just hide those elements. 


Class bindings are good if you're wanting to toggle a single class. And the ngClass directive is better if you're wanting to toggle multiple classes.

And then, I had said earlier that ngClass expects an object to be returned. That isn't exactly the whole truth.
You can actually return an object like this or you can return a string, which is space separated list of the classes you want applied. 
Or you can return an array of strings, which represent the classes you want to apply. 


[ngClass] vs [ngStyle]
      <div [class.green]="event?.time === '8:00 am'" [ngSwitch]="event?.time">
      <div [ngClass]="{green: event?.time === '8:00 am', bold: event?.time === '8:00 am'}" [ngSwitch]="event?.time">
      <div [ngClass]="getStartTimeClass()" [ngSwitch]="event?.time">
      <div [style.color]="event?.time === '8:00 am' ?  '#003300' : '#bbb'" [ngSwitch]="event?.time">
      <div [ngStyle]="{'color': event?.time === '8:00 am' ? '#003300' : '#bbb', 'font-weight': event?.time === '8:00 am' ? 'bold' : 'normal'}" [ngSwitch]="event?.time">
      <div [ngStyle]="getStartTimeStyle()" [ngSwitch]="event?.time">

  getStartTimeClass() {
    // const isEarlyStart = this.event && this.event.time === '8:00 am';
    // return {green: isEarlyStart, bold: isEarlyStart };

    // // Or
    // if (this.event && this.event.time === '8:00 am') {
    //   return 'green bold';
    // }
    // return '';

    // Or
    if (this.event && this.event.time === '8:00 am') {
      return ['green', 'bold'];
    }
    return [];
  }

  getStartTimeStyle(): any {
    if (this.event && this.event.time === '8:00 am') {
      return {color: '#003300', 'font-weight': 'bold'};
    }
    return {};
  }


5. Creating Reusable Angular Services
##################################################
let eventsService = new EventsService()
What if elsewhere in our application we decided in some cases, we should get the data from an Ajax call 
and in other cases, we should get them from the local browser storage. We'd have no way to use a different type of eventsService. 

















